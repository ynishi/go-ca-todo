// Package interacter implements use case interacter layer of todo domain.
// It contains use case interacter, boundary object and interface of repository(interface for data access).
package interacter

import (
	"github.com/ynishi/go-ca-todo/pkg/todo"
	"time"
)

// TodoInteracter is a concrete struct for use case interactor.
// The reason of this struct has no interface is that it access data via repository interface.
// So at first, interface is no need(although testing), just inject repository.
// When new use case is appended, add method to TodoInteracter, it has no affection to existence methods.
type TodoInteracter struct {
	todo TodoContent
	tag  Tag
}

// NewTodoIntercter is constructor with todo and tag repositories that implements its interfaces.
func NewTodoIntercter(todo TodoContent, tag Tag) *TodoInteracter {
	return &TodoInteracter{
		todo,
		tag,
	}
}

// List represents an usecase that returns all todos, generated by todo and tag repositories.
func (ti *TodoInteracter) List() *Res {
	todos := ti.todo.FetchAll()
	for i, v := range todos {
		todos[i].Tag = ti.tag.GetByTitle(v.Title)
	}
	return &Res{todos}
}

// Add represents an usecase that add new todo to todo and tag repositories.
func (ti *TodoInteracter) Add(r Req) *Res {
	t := todo.NewTodo(r.Title, r.Tag, r.Due, time.Now())
	if t == nil {
		return nil
	}
	ti.todo.Add(t)
	ti.tag.Add(t.Title, t.Tag)
	return &Res{
		[]todo.Todo{
			*t,
		},
	}
}

// Res is a boundary object for adapters.
type Res struct {
	Todos []todo.Todo
}

// Req is a boundary object for adapters.
type Req struct {
	Title string
	Tag   string
	Due   time.Time
	Sub   string
}

// TodoContent is an interface for TodoContent repository that contains Todo without Tag.
// The reason of separation tag is just express Entity and Data is different.
type TodoContent interface {
	FetchAll() []todo.Todo
	Add(*todo.Todo)
}

// Tag is an interface for Tog repository that contains sTag.
type Tag interface {
	GetByTitle(string) string
	Add(tag, title string)
}
